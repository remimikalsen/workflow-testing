name: Build, Tag, and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine next version from last tag
        id: semver
        run: |
          git fetch --tags --prune
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "Latest tag: $LATEST_TAG"
          MAJOR=$(echo "$LATEST_TAG" | cut -d '.' -f 1)
          MINOR=$(echo "$LATEST_TAG" | cut -d '.' -f 2)
          PATCH=$(echo "$LATEST_TAG" | cut -d '.' -f 3)
          NEXT_MAJOR=$MAJOR
          NEXT_MINOR=$MINOR
          NEXT_PATCH=$((PATCH + 1))
          if [[ "${{ github.event.head_commit.message }}" =~ \[major\] ]]; then
            NEXT_MAJOR=$((MAJOR + 1))
            NEXT_MINOR=0
            NEXT_PATCH=0
          elif [[ "${{ github.event.head_commit.message }}" =~ \[minor\] ]]; then
            NEXT_MINOR=$((MINOR + 1))
            NEXT_PATCH=0
          fi
          NEXT_VERSION="${NEXT_MAJOR}.${NEXT_MINOR}.${NEXT_PATCH}"
          echo "VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "MAJOR=$NEXT_MAJOR" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t workflow-testing:build -f Dockerfile .

      - name: Tag Docker image
        run: |
          docker tag workflow-testing:build ghcr.io/remimikalsen/workflow-testing:${{ env.VERSION }}
          docker tag workflow-testing:build ghcr.io/remimikalsen/workflow-testing:v${{ env.MAJOR }}

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Push Docker image
        run: |
          docker push ghcr.io/remimikalsen/workflow-testing:${{ env.VERSION }}
          docker push ghcr.io/remimikalsen/workflow-testing:v${{ env.MAJOR }}

      - name: Push new Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "${{ env.VERSION }}" -m "ci: release version ${{ env.VERSION }}"
          git push origin "${{ env.VERSION }}"

      - name: Get PR metadata
        uses: 8BitJonny/gh-get-current-pr@3.0.0
        id: pr_meta
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get commit messages with SHAs and GitHub handles
        run: |
          if [[ "$SQUASH_MERGE" == "true" ]]; then
            # Fetch the single PR commit using GitHub API and extract relevant data using jq
            curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.pr_meta.outputs.number }}/commits" \
              | jq -r '.[] | "\(.commit.message) (\(.sha[:7])) - @\(.author.login)"' \
              > commits.txt
          else
            # Get commit SHAs in range
            commit_shas=$(git log --pretty=format:"%H" ${{ github.event.before }}..${{ github.sha }})
            
            # Initialize an empty file
            > commits.txt
      
            # Loop through each commit SHA and fetch GitHub username via API
            for sha in $commit_shas; do
              commit_data=$(curl -s \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/commits/$sha")
      
              commit_message=$(echo "$commit_data" | jq -r '.commit.message')
              short_sha=$(echo "$sha" | cut -c1-7)
              github_handle=$(echo "$commit_data" | jq -r '.author.login')
      
              # Append commit details to file
              echo "- $commit_message ($short_sha) - @$github_handle" >> commits.txt
            done
          fi
      

      - name: Build release notes file
        run: |
          echo "## ${{ steps.pr_meta.outputs.pr_title }}" > release_body.md
          if [[ -n "${{ steps.pr_meta.outputs.pr_body }}" ]]; then
            echo "" >> release_body.md
            echo "### Summary" >> release_body.md
            echo "${{ steps.pr_meta.outputs.pr_body }}" >> release_body.md
          fi
          echo "" >> release_body.md
          echo "### Changes" >> release_body.md
          cat commits.txt >> release_body.md
          echo "" >> release_body.md
          echo "### Docker Tags" >> release_body.md
          echo "- Stable: [ghcr.io/remimikalsen/workflow-testing:${{ env.VERSION }}](https://ghcr.io/remimikalsen/workflow-testing:${{ env.VERSION }})" >> release_body.md
          echo "- Major: [ghcr.io/remimikalsen/workflow-testing:v${{ env.MAJOR }}](https://ghcr.io/remimikalsen/workflow-testing:v${{ env.MAJOR }})" >> release_body.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          name: "Release ${{ env.VERSION }}"
          body_path: release_body.md
          draft: false
          prerelease: false

      #- name: Trigger production update
      #  run: |
      #    curl -X POST \
      #      -H "Content-Type: application/json" \
      #      -H "Secret: ${{ secrets.WEBHOOK_SECRET }}" \
      #      -d '{"version": "'${{ env.VERSION }}'"}' \
      #      https://webhooks.theawesomegarage.com/update-workflow-testing
